// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ศิลปิน
model Artist {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String?
  itunesId  String?  @unique // iTunes artist ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tracks Track[]

  @@index([name])
}

// เพลง (เก็บเฉพาะที่บันทึกจริงๆ)
model Track {
  id          Int      @id @default(autoincrement())
  name        String
  artistId    Int
  albumName   String?  // ชื่ออัลบั้มแบบ plain text
  albumImage  String?  // รูปอัลบั้ม
  itunesId    String?  @unique // iTunes track ID
  duration    Int?     // milliseconds
  trackNumber Int?
  note        String?  // บันทึกรายละเอียดหรือไอเดียเสริม
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  artist         Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade)
  trackStatus    TrackStatus?
  playlistTracks PlaylistTrack[]

  @@index([artistId])
  @@index([name])
  @@index([createdAt])
}

// สถานะเพลง
model TrackStatus {
  id        Int      @id @default(autoincrement())
  trackId   Int      @unique
  status    String   @default("idea") // idea, ready, recorded, posted
  starred   Boolean  @default(false)
  ignored   Boolean  @default(false) // ไม่สนใจ - เพลงที่เล่นไม่ได้หรือไม่มี intro ที่เหมาะ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  track    Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)
  postLogs PostLog[]

  @@index([status])
  @@index([starred])
  @@index([ignored])
}

// บันทึกการโพสต์
model PostLog {
  id            Int      @id @default(autoincrement())
  trackStatusId Int
  platform      String   // TikTok, YouTube, Facebook
  url           String
  postedAt      DateTime @default(now())
  createdAt     DateTime @default(now())

  trackStatus TrackStatus @relation(fields: [trackStatusId], references: [id], onDelete: Cascade)

  @@index([trackStatusId])
  @@index([platform])
}

// Playlist
model Playlist {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  playlistTracks PlaylistTrack[]

  @@index([name])
}

// เพลงใน Playlist
model PlaylistTrack {
  id         Int      @id @default(autoincrement())
  playlistId Int
  trackId    Int
  order      Int      @default(0) // ลำดับในเพลย์ลิสต์
  createdAt  DateTime @default(now())

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track    Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@index([playlistId])
  @@index([trackId])
}
